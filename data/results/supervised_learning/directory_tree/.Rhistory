### Image-wise logistic regression
model_test <- glm(V2 ~ image_pred_prop, family=family, data=test_data_summary)
### ROC
roc_test_wsi <- roc(test_data_summary$V2, test_data_summary$image_pred_mean, plot = TRUE)
roc_test_wsi
test_data$V1
test_data_summary <- test_data %>%
mutate(mean_V1 = mean(V1, na.rm=TRUE),
# quantile_V1 = quantile(V1)[4]) %>%
quantile_V1 = quantile(V1, 0.90, na.rm=TRUE)) %>%
group_by(imagename) %>%
summarise(
image_pred_mean = mean(V1, na.rm=TRUE),
# image_pred_prop = sum(V1 > quantile(test_data$V1, na.rm=TRUE)[4]) / n()  # proportion over 75% quantile
# image_pred_prop = sum(V1 > mean_V1) / n()  # proportion over 75% quantile
image_pred_prop = sum(V1 > quantile_V1) / n()  # proportion over 75% quantile
# image_pred_prop = sum(V1 > 0.25) / n()  # proportion over 75% quantile
)
test_data_summary <- test_data_summary %>% left_join(test_data, by = "imagename") %>% distinct(imagename, .keep_all = TRUE)
### Image-wise logistic regression
model_test <- glm(V2 ~ image_pred_prop, family=family, data=test_data_summary)
### ROC
roc_test_wsi <- roc(test_data_summary$V2, test_data_summary$image_pred_mean, plot = TRUE)
roc_test_wsi
test_data$imagename
test_data_summary <- test_data %>%
group_by(imagename) %>%
mutate(mean_V1 = mean(V1, na.rm=TRUE),
# quantile_V1 = quantile(V1)[4]) %>%
quantile_V1 = quantile(V1, 0.90, na.rm=TRUE)) %>%
summarise(
image_pred_mean = mean(V1, na.rm=TRUE),
# image_pred_prop = sum(V1 > quantile(test_data$V1, na.rm=TRUE)[4]) / n()  # proportion over 75% quantile
# image_pred_prop = sum(V1 > mean_V1) / n()  # proportion over 75% quantile
image_pred_prop = sum(V1 > quantile_V1) / n()  # proportion over 75% quantile
# image_pred_prop = sum(V1 > 0.25) / n()  # proportion over 75% quantile
)
test_data_summary <- test_data_summary %>% left_join(test_data, by = "imagename") %>% distinct(imagename, .keep_all = TRUE)
### Image-wise logistic regression
model_test <- glm(V2 ~ image_pred_prop, family=family, data=test_data_summary)
### ROC
roc_test_wsi <- roc(test_data_summary$V2, test_data_summary$image_pred_mean, plot = TRUE)
roc_test_wsi
test_data$vgg16_feature_list_name
test_data_summary <- test_data$imagename %>%
ungroup() %>%
mutate(mean_V1 = mean(V1, na.rm=TRUE),
# quantile_V1 = quantile(V1)[4]) %>%
quantile_V1 = quantile(V1, 0.90, na.rm=TRUE)) %>%
group_by(mean_V1, imagename) %>%
summarise(
image_pred_mean = mean(V1, na.rm=TRUE),
# image_pred_prop = sum(V1 > quantile(test_data$V1, na.rm=TRUE)[4]) / n()  # proportion over 75% quantile
# image_pred_prop = sum(V1 > mean_V1) / n()  # proportion over 75% quantile
image_pred_prop = sum(V1 > quantile_V1) / n()  # proportion over 75% quantile
# image_pred_prop = sum(V1 > 0.25) / n()  # proportion over 75% quantile
)
test_data_summary <- test_data %>%
ungroup() %>%
mutate(mean_V1 = mean(V1, na.rm=TRUE),
# quantile_V1 = quantile(V1)[4]) %>%
quantile_V1 = quantile(V1, 0.90, na.rm=TRUE)) %>%
group_by(mean_V1, imagename) %>%
summarise(
image_pred_mean = mean(V1, na.rm=TRUE),
# image_pred_prop = sum(V1 > quantile(test_data$V1, na.rm=TRUE)[4]) / n()  # proportion over 75% quantile
# image_pred_prop = sum(V1 > mean_V1) / n()  # proportion over 75% quantile
image_pred_prop = sum(V1 > quantile_V1) / n()  # proportion over 75% quantile
# image_pred_prop = sum(V1 > 0.25) / n()  # proportion over 75% quantile
)
test_data_summary <- test_data_summary %>% left_join(test_data, by = "imagename") %>% distinct(imagename, .keep_all = TRUE)
### Image-wise logistic regression
model_test <- glm(V2 ~ image_pred_prop, family=family, data=test_data_summary)
### ROC
roc_test_wsi <- roc(test_data_summary$V2, test_data_summary$image_pred_mean, plot = TRUE)
roc_test_wsi
test_data_summary$image_pred_mean
plot(test_data_summary$V2, test_data_summary$image_pred_mean)
test_data_summary <- test_data %>%
ungroup() %>%
mutate(mean_V1 = mean(V1, na.rm=TRUE),
# quantile_V1 = quantile(V1)[4]) %>%
quantile_V1 = quantile(V1, 0.90, na.rm=TRUE)) %>%
group_by(mean_V1, imagename) %>%
summarise(
image_pred_mean = mean(V1, na.rm=TRUE),
# image_pred_prop = sum(V1 > quantile(test_data$V1, na.rm=TRUE)[4]) / n()  # proportion over 75% quantile
image_pred_prop = sum(V1 > mean_V1) / n()  # proportion over 75% quantile
# image_pred_prop = sum(V1 > quantile_V1) / n()  # proportion over 75% quantile
# image_pred_prop = sum(V1 > 0.25) / n()  # proportion over 75% quantile
)
test_data_summary <- test_data_summary %>% left_join(test_data, by = "imagename") %>% distinct(imagename, .keep_all = TRUE)
### Image-wise logistic regression
model_test <- glm(V2 ~ image_pred_prop, family=family, data=test_data_summary)
### ROC
roc_test_wsi <- roc(test_data_summary$V2, test_data_summary$image_pred_mean, plot = TRUE)
roc_test_wsi
roc_test_wsi <- roc(test_data_summary$V2, test_data_summary$image_pred_prop, plot = TRUE)
roc_test_wsi
rm(list=ls())
# Load packages
library(tidyverse)
library(stringr)
library(readxl)
library(writexl)
library(dplyr)
library(glmnet)
library(biglasso)
library(pROC)
library(survAUC)
library(plotROC)
library(ROCR)
library(raster)
library(RColorBrewer)
library(ggpubr)
set.seed(123)
##################################### Feature matrix ##############################################################################################
# Load Imagenet data
vgg16_feature_list1 <- readRDS("/Users/oscarbruck/OneDrive - University of Helsinki/Tutkimus/Projekteja/MDS/Analysis/HE/Data/Feature_list/VGG16/he_imagenet_weights/top_features/vgg16_feature_list_5000.rds")
## Make a variable with the image spot name
vgg16_feature_list1$name <- gsub("/csc/mustjoki/imageanalysis/analysisR/input/mds_he_tiles/", "", vgg16_feature_list1$vgg16_feature_list_name)
vgg16_feature_list1$name <- gsub("\\/MDS_TMA", "MDS_TMA", vgg16_feature_list1$name)
vgg16_feature_list1$name <- gsub("_modified[[:print:]]+", "", vgg16_feature_list1$name)
vgg16_feature_list1 <- vgg16_feature_list1 %>% dplyr::select(name, everything())
#################################### Clinical data ##############################################################################################
# Load data
vgg16_feature_list_cluster_clinical <- read_xlsx("/Users/oscarbruck/OneDrive - University of Helsinki/Tutkimus/Projekteja/MDS/Analysis/HE/Data/Clinicaldata_forimages.xlsx")
# Keep only MDS, MDS/MPN and AA patients
## "MDS", "Anaemia", "MDS/MPN", "ALL", "AML", "Dysplasia", "No dg", "AA", "ET"
vgg16_feature_list_cluster_clinical <- vgg16_feature_list_cluster_clinical[vgg16_feature_list_cluster_clinical$diagnosis_abbr=="MDS",]
# vgg16_feature_list_cluster_clinical$diagnosis_abbr=="MDS/MPN"|
# vgg16_feature_list_cluster_clinical$diagnosis_abbr=="Healthy"|
# vgg16_feature_list_cluster_clinical$diagnosis_abbr=="AA",]
# Merge clinical and feature data
clinical <- vgg16_feature_list_cluster_clinical %>%
dplyr::select(Image_name, cmplx_ipss, ch_five_q_del, ipssr_score) %>%
rename(name = Image_name)
hm1 <- clinical %>%
left_join(vgg16_feature_list1, by = "name") %>%
dplyr::select(name, vgg16_feature_list_name, cmplx_ipss, ch_five_q_del, ipssr_score, everything())
#################################### Split dataset ##############################################################################################
# Glmnet
## Dg classes
# hm1$cmplx_ipss <- as.numeric(hm1$cmplx_ipss)
# hm1$ch_five_q_del <- as.numeric(hm1$ch_five_q_del)
# hm1$ipssr_score <- as.numeric(hm1$ipssr_score)
# hm1 <- hm1[!is.na(hm1$cmplx_ipss),]
hm1 <- hm1[!is.na(hm1$vgg16_feature_list_name),]
## Sample data to training and test set
### Sample by tile number
# n <- nrow(hm1)
# sample <- sample(seq(n), size = n * 0.67, replace = FALSE)
# train_mds <- hm1[sample,]
### Sample by wsi number
n <- length(unique(hm1$name))
sample <- sample(unique(hm1$name), size = n * 0.67, replace = FALSE)
## Train
train_mds <- hm1 %>% filter(name %in% sample)
### X
length(unique(train_mds$name))
trainX_mds <- train_mds[,3:ncol(hm1)] %>% dplyr::select(-c(cmplx_ipss, ch_five_q_del, ipssr_score))
trainX_mds <- sapply(trainX_mds, function(x) as.numeric(x))
trainX_mds <- as.matrix(trainX_mds)
### Y
trainY_mds_cmplx <- as.factor(as.matrix(train_mds["cmplx_ipss"]))   # For logistic regression
trainY_mds_del5q <- as.factor(as.matrix(train_mds["ch_five_q_del"]))   # For logistic regression
trainY_mds_ipssr_score <- as.matrix(train_mds["ipssr_score"])              # For linear regression
## Test
test_mds <- hm1 %>% filter(!name %in% sample)
### X
testX_mds <- test_mds[,3:ncol(hm1)] %>% dplyr::select(-c(cmplx_ipss, ch_five_q_del, ipssr_score))
testX_mds <- sapply(testX_mds, function(x) as.numeric(x))
testX_mds <- as.matrix(testX_mds)
### Y
testY_mds_cmplx <- as.factor(as.matrix(test_mds["cmplx_ipss"]))     # For logistic regression
testY_mds_del5q <- as.factor(as.matrix(test_mds["ch_five_q_del"]))     # For logistic regression
testY_mds_ipssr_score <- as.matrix(test_mds["ipssr_score"])              # For linear regression
## As big matrix
trainX_mds.bm <- as.big.matrix(trainX_mds)
testX_mds.bm <- as.big.matrix(testX_mds)
########### Imagenet #########################################################################################
# Load data
# VGG16
## Cmplx
test <- readRDS("/Users/oscarbruck/OneDrive - University of Helsinki/Tutkimus/Projekteja/MDS/Analysis/HE/Data/Feature_list/VGG16/Elastic_net_results/cmplx/MDS/vgg16_pred_cmplx_elastinet_biglasso_MDSonly.rds"); k = "Complex karyotype"; testY_mds = testY_mds_cmplx; trainY_mds = trainY_mds_cmplx; family = binomial(link='logit')
## Del5q
# test <- readRDS("/Users/oscarbruck/OneDrive - University of Helsinki/Tutkimus/Projekteja/MDS/Analysis/HE/Data/Feature_list/VGG16/Elastic_net_results/5delq/MDS/vgg16_pred_5delq_elastinet_biglasso_MDSonly.rds"); k = "Ch5del"; testY_mds = testY_mds_del5q; trainY_mds = trainY_mds_del5q; family = binomial(link='logit')
## IPSSR
# test <- readRDS("/Users/oscarbruck/OneDrive - University of Helsinki/Tutkimus/Projekteja/MDS/Analysis/HE/Data/Feature_list/VGG16/Elastic_net_results/ipssr/MDS/vgg16_pred_ipssr_elastinet_biglasso_MDSonly.rds"); k = "IPSSR score"; testY_mds = testY_mds_ipssr_score; trainY_mds = trainY_mds_ipssr_score; family = gaussian(link='identity')
# Xception
## Cmplx
# test <- readRDS("/Users/oscarbruck/OneDrive - University of Helsinki/Tutkimus/Projekteja/MDS/Analysis/HE/Data/Feature_list/Xception/Elastic_net_results/cmplx/MDS/xception_pred_cmplx_elastinet_biglasso_MDSonly.rds"); k = "Complex karyotype"; testY_mds = testY_mds_cmplx; trainY_mds = trainY_mds_cmplx; family = binomial(link='logit')
## Del5q
# test <- readRDS("/Users/oscarbruck/OneDrive - University of Helsinki/Tutkimus/Projekteja/MDS/Analysis/HE/Data/Feature_list/Xception/Elastic_net_results/5delq/MDS/xception_pred_5delq_elastinet_biglasso_MDSonly.rds"); k = "Ch5del"; testY_mds = testY_mds_del5q; trainY_mds = trainY_mds_del5q; family = binomial(link='logit')
## IPSSR
# test <- readRDS("/Users/oscarbruck/OneDrive - University of Helsinki/Tutkimus/Projekteja/MDS/Analysis/HE/Data/Feature_list/Xception/Elastic_net_results/ipssr/MDS/xception_pred_ipssr_elastinet_biglasso_MDSonly.rds"); k = "IPSSR score"; testY_mds = testY_mds_ipssr_score; trainY_mds = trainY_mds_ipssr_score; family = gaussian(link='identity')
# Separate list into elements
names(test) <- c("fit.bin.enet_min_cv", "fit.bin.enet_min", "fit.bin.enet_1se",
"fit.bin.lasso_min_cv", "fit.bin.lasso_min", "fit.bin.lasso_1se",
"fit.bin.ridge_min_cv", "fit.bin.ridge_min", "fit.bin.ridge_1se",
"pred_lasso_min", "pred_ridge_min", "pred_enet_min", "pred_lasso_1se",
"pred_ridge_1se", "pred_enet_1se")
summary(test)
enet_cv <- test[[1]]
enet_min <- test[[2]]
enet_1se <- test[[3]]
lasso_cv <- test[[4]]
lasso_min <- test[[5]]
lasso_1se <- test[[6]]
ridge_cv <- test[[7]]
ridge_min <- test[[8]]
ridge_1se <- test[[9]]
pred_lasso_min <- test[[10]]
pred_ridge_min <- test[[11]]
pred_enet_min <- test[[12]]
pred_lasso_1se <- test[[13]]
pred_ridge_1se <- test[[14]]
pred_enet_1se <- test[[15]]
# Define coefficient factors
# lasso_coef <- coef(cv, lambda=cv$lambda.min, drop = TRUE)
# lasso_coef_nonzero <- lasso_coef[which(lasso_coef != 0)]
fit <- enet_min; penalty = "enet"; alpha = 0.5; lambda = "lambda.min"; j = "enet_lambdamin"
# Use significant coefficients to assign tile-wise predictions
## Train data
pred <- predict(fit, trainX_mds.bm, type="response", penalty=penalty, alpha = alpha)
train_data <- cbind(as.matrix(pred), as.numeric(as.character(trainY_mds))) %>% as.data.frame()
colnames(train_data)[1] <- "V1"
## Tile-wise logistic regression model
model <- glm(V2 ~ V1, family=family, data=train_data)
summary(model)
roc_train_tile <- roc(train_data$V2, train_data$V1, plot = TRUE)
### Combine predictions in the image-level
train_data$imagename <- train_mds$name
train_data$vgg16_feature_list_name <- train_mds$vgg16_feature_list_name
train_data_summary <- train_data %>%
ungroup() %>%
mutate(mean_V1 = mean(V1, na.rm=TRUE),
quantile_V1 = quantile(V1, 0.90, na.rm=TRUE)) %>%
group_by(mean_V1, imagename) %>%
summarise(
image_pred_mean = mean(V1),
image_pred_prop = sum(V1 > quantile_V1) / n()  # proportion over 75% quantile
# image_pred_prop = sum(V1 > quantile(test_data$V1)[4]) / n()  # proportion over 75% quantile
# image_pred_prop = sum(V1 > mean_V1) / n()  # proportion over 75% quantile
# image_pred_prop = sum(V1 > 0.40) / n()  # proportion over 75% quantile
)
train_data_summary <- train_data_summary %>% left_join(train_data, by = "imagename") %>% distinct(imagename, .keep_all = TRUE)
### Image-wise logistic regression
model_train <- glm(V2 ~ image_pred_prop, family=family, data=train_data_summary)
### ROC
roc_train_wsi <- roc(train_data_summary$V2, train_data_summary$image_pred_mean, plot = TRUE)
roc_train_wsi
# roc_train_wsi <- roc(train_data_summary$V2, train_data_summary$image_pred_prop, plot = TRUE)
# roc_train_wsi
## Test data
pred <- predict(fit, testX_mds.bm, type="response", penalty=penalty, alpha = alpha)
test_data <- cbind(as.matrix(pred), as.numeric(as.character(testY_mds))) %>% as.data.frame()
## Tile-wise logistic regression model
model <- glm(V2 ~ V1,family=family, data=test_data)
summary(model)
roc_test_tile <- roc(test_data$V2, test_data$V1, plot = TRUE)
### Combine predictions in the image-level
test_data$imagename <- test_mds$name
test_data$vgg16_feature_list_name <- test_mds$vgg16_feature_list_name
test_data_summary <- test_data %>%
ungroup() %>%
mutate(mean_V1 = mean(V1, na.rm=TRUE),
# quantile_V1 = quantile(V1)[4]) %>%
quantile_V1 = quantile(V1, 0.90, na.rm=TRUE)) %>%
group_by(mean_V1, imagename) %>%
summarise(
image_pred_mean = mean(V1, na.rm=TRUE),
# image_pred_prop = sum(V1 > quantile(test_data$V1, na.rm=TRUE)[4]) / n()  # proportion over 75% quantile
image_pred_prop = sum(V1 > mean_V1) / n()  # proportion over 75% quantile
# image_pred_prop = sum(V1 > quantile_V1) / n()  # proportion over 75% quantile
# image_pred_prop = sum(V1 > 0.25) / n()  # proportion over 75% quantile
)
test_data_summary <- test_data_summary %>% left_join(test_data, by = "imagename") %>% distinct(imagename, .keep_all = TRUE)
### Image-wise logistic regression
model_test <- glm(V2 ~ image_pred_prop, family=family, data=test_data_summary)
### ROC
roc_test_wsi <- roc(test_data_summary$V2, test_data_summary$image_pred_mean, plot = TRUE)
roc_test_wsi
# roc_test_wsi <- roc(test_data_summary$V2, test_data_summary$image_pred_prop, plot = TRUE)
# roc_test_wsi
rm(list=ls())
# Load packages
library(tidyverse)
library(stringr)
library(readxl)
library(writexl)
library(dplyr)
library(glmnet)
library(biglasso)
library(pROC)
library(survAUC)
library(plotROC)
library(ROCR)
library(raster)
library(RColorBrewer)
library(ggpubr)
set.seed(123)
##################################### Feature matrix ##############################################################################################
# Load Imagenet data
vgg16_feature_list1 <- readRDS("/Users/oscarbruck/OneDrive - University of Helsinki/Tutkimus/Projekteja/MDS/Analysis/HE/Data/Feature_list/VGG16/he_imagenet_weights/top_features/vgg16_feature_list_5000.rds")
## Make a variable with the image spot name
vgg16_feature_list1$name <- gsub("/csc/mustjoki/imageanalysis/analysisR/input/mds_he_tiles/", "", vgg16_feature_list1$vgg16_feature_list_name)
vgg16_feature_list1$name <- gsub("\\/MDS_TMA", "MDS_TMA", vgg16_feature_list1$name)
vgg16_feature_list1$name <- gsub("_modified[[:print:]]+", "", vgg16_feature_list1$name)
vgg16_feature_list1 <- vgg16_feature_list1 %>% dplyr::select(name, everything())
#################################### Clinical data ##############################################################################################
# Load data
vgg16_feature_list_cluster_clinical <- read_xlsx("/Users/oscarbruck/OneDrive - University of Helsinki/Tutkimus/Projekteja/MDS/Analysis/HE/Data/Clinicaldata_forimages.xlsx")
# Keep only MDS, MDS/MPN and AA patients
## "MDS", "Anaemia", "MDS/MPN", "ALL", "AML", "Dysplasia", "No dg", "AA", "ET"
vgg16_feature_list_cluster_clinical <- vgg16_feature_list_cluster_clinical[vgg16_feature_list_cluster_clinical$diagnosis_abbr=="MDS",]
# vgg16_feature_list_cluster_clinical$diagnosis_abbr=="MDS/MPN"|
# vgg16_feature_list_cluster_clinical$diagnosis_abbr=="Healthy"|
# vgg16_feature_list_cluster_clinical$diagnosis_abbr=="AA",]
# Merge clinical and feature data
clinical <- vgg16_feature_list_cluster_clinical %>%
dplyr::select(Image_name, cmplx_ipss, ch_five_q_del, ipssr_score) %>%
rename(name = Image_name)
hm1 <- clinical %>%
left_join(vgg16_feature_list1, by = "name") %>%
dplyr::select(name, vgg16_feature_list_name, cmplx_ipss, ch_five_q_del, ipssr_score, everything())
# Glmnet
## Dg classes
# hm1$cmplx_ipss <- as.numeric(hm1$cmplx_ipss)
# hm1$ch_five_q_del <- as.numeric(hm1$ch_five_q_del)
# hm1$ipssr_score <- as.numeric(hm1$ipssr_score)
# hm1 <- hm1[!is.na(hm1$cmplx_ipss),]
hm1 <- hm1[!is.na(hm1$vgg16_feature_list_name),]
## Sample data to training and test set
### Sample by tile number
# n <- nrow(hm1)
# sample <- sample(seq(n), size = n * 0.67, replace = FALSE)
# train_mds <- hm1[sample,]
### Sample by wsi number
n <- length(unique(hm1$name))
sample <- sample(unique(hm1$name), size = n * 0.67, replace = FALSE)
## Train
train_mds <- hm1 %>% filter(name %in% sample)
### X
length(unique(train_mds$name))
trainX_mds <- train_mds[,3:ncol(hm1)] %>% dplyr::select(-c(cmplx_ipss, ch_five_q_del, ipssr_score))
trainX_mds <- sapply(trainX_mds, function(x) as.numeric(x))
trainX_mds <- as.matrix(trainX_mds)
### Y
trainY_mds_cmplx <- as.factor(as.matrix(train_mds["cmplx_ipss"]))   # For logistic regression
trainY_mds_del5q <- as.factor(as.matrix(train_mds["ch_five_q_del"]))   # For logistic regression
trainY_mds_ipssr_score <- as.matrix(train_mds["ipssr_score"])              # For linear regression
## Test
test_mds <- hm1 %>% filter(!name %in% sample)
### X
testX_mds <- test_mds[,3:ncol(hm1)] %>% dplyr::select(-c(cmplx_ipss, ch_five_q_del, ipssr_score))
testX_mds <- sapply(testX_mds, function(x) as.numeric(x))
testX_mds <- as.matrix(testX_mds)
### Y
testY_mds_cmplx <- as.factor(as.matrix(test_mds["cmplx_ipss"]))     # For logistic regression
testY_mds_del5q <- as.factor(as.matrix(test_mds["ch_five_q_del"]))     # For logistic regression
testY_mds_ipssr_score <- as.matrix(test_mds["ipssr_score"])              # For linear regression
## As big matrix
trainX_mds.bm <- as.big.matrix(trainX_mds)
testX_mds.bm <- as.big.matrix(testX_mds)
########### Imagenet #########################################################################################
# Load data
# VGG16
test <- readRDS("/Users/oscarbruck/OneDrive - University of Helsinki/Tutkimus/Projekteja/MDS/Analysis/HE/Data/Feature_list/VGG16/Elastic_net_results/cmplx/MDS/vgg16_pred_cmplx_elastinet_biglasso_MDSonly.rds"); k = "Complex karyotype"; testY_mds = testY_mds_cmplx; trainY_mds = trainY_mds_cmplx; family = binomial(link='logit')
## Del5q
# test <- readRDS("/Users/oscarbruck/OneDrive - University of Helsinki/Tutkimus/Projekteja/MDS/Analysis/HE/Data/Feature_list/VGG16/Elastic_net_results/5delq/MDS/vgg16_pred_5delq_elastinet_biglasso_MDSonly.rds"); k = "Ch5del"; testY_mds = testY_mds_del5q; trainY_mds = trainY_mds_del5q; family = binomial(link='logit')
## IPSSR
# test <- readRDS("/Users/oscarbruck/OneDrive - University of Helsinki/Tutkimus/Projekteja/MDS/Analysis/HE/Data/Feature_list/VGG16/Elastic_net_results/ipssr/MDS/vgg16_pred_ipssr_elastinet_biglasso_MDSonly.rds"); k = "IPSSR score"; testY_mds = testY_mds_ipssr_score; trainY_mds = trainY_mds_ipssr_score; family = gaussian(link='identity')
# Xception
## Cmplx
# test <- readRDS("/Users/oscarbruck/OneDrive - University of Helsinki/Tutkimus/Projekteja/MDS/Analysis/HE/Data/Feature_list/Xception/Elastic_net_results/cmplx/MDS/xception_pred_cmplx_elastinet_biglasso_MDSonly.rds"); k = "Complex karyotype"; testY_mds = testY_mds_cmplx; trainY_mds = trainY_mds_cmplx; family = binomial(link='logit')
## Del5q
# test <- readRDS("/Users/oscarbruck/OneDrive - University of Helsinki/Tutkimus/Projekteja/MDS/Analysis/HE/Data/Feature_list/Xception/Elastic_net_results/5delq/MDS/xception_pred_5delq_elastinet_biglasso_MDSonly.rds"); k = "Ch5del"; testY_mds = testY_mds_del5q; trainY_mds = trainY_mds_del5q; family = binomial(link='logit')
## IPSSR
# test <- readRDS("/Users/oscarbruck/OneDrive - University of Helsinki/Tutkimus/Projekteja/MDS/Analysis/HE/Data/Feature_list/Xception/Elastic_net_results/ipssr/MDS/xception_pred_ipssr_elastinet_biglasso_MDSonly.rds"); k = "IPSSR score"; testY_mds = testY_mds_ipssr_score; trainY_mds = trainY_mds_ipssr_score; family = gaussian(link='identity')
# Separate list into elements
names(test) <- c("fit.bin.enet_min_cv", "fit.bin.enet_min", "fit.bin.enet_1se",
"fit.bin.lasso_min_cv", "fit.bin.lasso_min", "fit.bin.lasso_1se",
"fit.bin.ridge_min_cv", "fit.bin.ridge_min", "fit.bin.ridge_1se",
"pred_lasso_min", "pred_ridge_min", "pred_enet_min", "pred_lasso_1se",
"pred_ridge_1se", "pred_enet_1se")
summary(test)
enet_cv <- test[[1]]
enet_min <- test[[2]]
enet_1se <- test[[3]]
lasso_cv <- test[[4]]
lasso_min <- test[[5]]
lasso_1se <- test[[6]]
ridge_cv <- test[[7]]
ridge_min <- test[[8]]
ridge_1se <- test[[9]]
pred_lasso_min <- test[[10]]
pred_ridge_min <- test[[11]]
pred_enet_min <- test[[12]]
pred_lasso_1se <- test[[13]]
pred_ridge_1se <- test[[14]]
pred_enet_1se <- test[[15]]
fit <- enet_min; penalty = "enet"; alpha = 0.5; lambda = "lambda.min"; j = "enet_lambdamin"
# Use significant coefficients to assign tile-wise predictions
## Train data
pred <- predict(fit, trainX_mds.bm, type="response", penalty=penalty, alpha = alpha)
train_data <- cbind(as.matrix(pred), as.numeric(as.character(trainY_mds))) %>% as.data.frame()
colnames(train_data)[1] <- "V1"
## Tile-wise logistic regression model
model <- glm(V2 ~ V1, family=family, data=train_data)
summary(model)
roc_train_tile <- roc(train_data$V2, train_data$V1, plot = TRUE)
### Combine predictions in the image-level
train_data$imagename <- train_mds$name
train_data$vgg16_feature_list_name <- train_mds$vgg16_feature_list_name
train_data_summary <- train_data %>%
ungroup() %>%
mutate(mean_V1 = mean(V1, na.rm=TRUE),
quantile_V1 = quantile(V1, 0.90, na.rm=TRUE)) %>%
group_by(mean_V1, imagename) %>%
summarise(
image_pred_mean = mean(V1),
image_pred_prop = sum(V1 > quantile_V1) / n()  # proportion over 75% quantile
# image_pred_prop = sum(V1 > quantile(test_data$V1)[4]) / n()  # proportion over 75% quantile
# image_pred_prop = sum(V1 > mean_V1) / n()  # proportion over 75% quantile
# image_pred_prop = sum(V1 > 0.40) / n()  # proportion over 75% quantile
)
train_data_summary <- train_data_summary %>% left_join(train_data, by = "imagename") %>% distinct(imagename, .keep_all = TRUE)
### Image-wise logistic regression
model_train <- glm(V2 ~ image_pred_prop, family=family, data=train_data_summary)
### ROC
roc_train_wsi <- roc(train_data_summary$V2, train_data_summary$image_pred_mean, plot = TRUE)
roc_train_wsi
# roc_train_wsi <- roc(train_data_summary$V2, train_data_summary$image_pred_prop, plot = TRUE)
# roc_train_wsi
## Test data
pred <- predict(fit, testX_mds.bm, type="response", penalty=penalty, alpha = alpha)
test_data <- cbind(as.matrix(pred), as.numeric(as.character(testY_mds))) %>% as.data.frame()
## Tile-wise logistic regression model
model <- glm(V2 ~ V1,family=family, data=test_data)
summary(model)
roc_test_tile <- roc(test_data$V2, test_data$V1, plot = TRUE)
### Combine predictions in the image-level
test_data$imagename <- test_mds$name
test_data$vgg16_feature_list_name <- test_mds$vgg16_feature_list_name
test_data_summary <- test_data %>%
ungroup() %>%
mutate(mean_V1 = mean(V1, na.rm=TRUE),
# quantile_V1 = quantile(V1)[4]) %>%
quantile_V1 = quantile(V1, 0.90, na.rm=TRUE)) %>%
group_by(mean_V1, imagename) %>%
summarise(
image_pred_mean = mean(V1, na.rm=TRUE),
# image_pred_prop = sum(V1 > quantile(test_data$V1, na.rm=TRUE)[4]) / n()  # proportion over 75% quantile
image_pred_prop = sum(V1 > mean_V1) / n()  # proportion over 75% quantile
# image_pred_prop = sum(V1 > quantile_V1) / n()  # proportion over 75% quantile
# image_pred_prop = sum(V1 > 0.25) / n()  # proportion over 75% quantile
)
test_data_summary <- test_data_summary %>% left_join(test_data, by = "imagename") %>% distinct(imagename, .keep_all = TRUE)
### Image-wise logistic regression
model_test <- glm(V2 ~ image_pred_prop, family=family, data=test_data_summary)
### ROC
roc_test_wsi <- roc(test_data_summary$V2, test_data_summary$image_pred_mean, plot = TRUE)
roc_test_wsi
# roc_test_wsi <- roc(test_data_summary$V2, test_data_summary$image_pred_prop, plot = TRUE)
# roc_test_wsi
########### ROC plots #########
testX_mds.bm
fit
as.matrix(pred)
as.numeric(as.character(testY_mds))
test_data <- cbind(as.matrix(pred), as.numeric(as.character(testY_mds))) %>% as.data.frame()
## Tile-wise logistic regression model
model <- glm(V2 ~ V1,family=family, data=test_data)
summary(model)
roc_test_tile <- roc(test_data$V2, test_data$V1, plot = TRUE)
roc_test_tile <- roc(test_data$V2, test_data$V1, plot = TRUE)
### Combine predictions in the image-level
test_data$imagename <- test_mds$name
test_data$vgg16_feature_list_name <- test_mds$vgg16_feature_list_name
test_data_summary <- test_data %>%
ungroup() %>%
mutate(mean_V1 = mean(V1, na.rm=TRUE),
# quantile_V1 = quantile(V1)[4]) %>%
quantile_V1 = quantile(V1, 0.90, na.rm=TRUE)) %>%
group_by(mean_V1, imagename) %>%
summarise(
image_pred_mean = mean(V1, na.rm=TRUE),
# image_pred_prop = sum(V1 > quantile(test_data$V1, na.rm=TRUE)[4]) / n()  # proportion over 75% quantile
image_pred_prop = sum(V1 > mean_V1) / n()  # proportion over 75% quantile
# image_pred_prop = sum(V1 > quantile_V1) / n()  # proportion over 75% quantile
# image_pred_prop = sum(V1 > 0.25) / n()  # proportion over 75% quantile
)
test_data_summary$imagename
test_data$imagename
test_data$V2
test_data_summary <- test_data_summary %>% left_join(test_data, by = "imagename") %>% distinct(imagename, .keep_all = TRUE)
### Image-wise logistic regression
model_test <- glm(V2 ~ image_pred_prop, family=family, data=test_data_summary)
### ROC
roc_test_wsi <- roc(test_data_summary$V2, test_data_summary$image_pred_mean, plot = TRUE)
roc_test_wsi
# roc_test_wsi <- roc(test_data_summary$V2, test_data_summary$image_pred_prop, plot = TRUE)
# roc_test_wsi
## Test data
pred <- predict(fit, testX_mds.bm, type="response", penalty=penalty, alpha = alpha)
test_data <- cbind(as.matrix(pred), as.numeric(as.character(testY_mds))) %>% as.data.frame()
colnames(train_data)[1] <- "V1"
## Tile-wise logistic regression model
model <- glm(V2 ~ V1,family=family, data=test_data)
summary(model)
roc_test_tile <- roc(test_data$V2, test_data$V1, plot = TRUE)
